---
import { getLangFromUrl } from '../../../utils/i18n';
import { useTranslations } from '../i18n/translations';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class="max-w-xl mx-auto p-4">
  <div class="mb-6">
    <label for="qr-text" class="block text-sm font-medium text-gray-700 mb-2">
      {t('input.label')}
    </label>
    <textarea
      id="qr-text"
      class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      rows="4"
      placeholder={t('input.placeholder')}
    ></textarea>
  </div>

  <div class="flex flex-col items-center gap-4">
    <button
      id="generate-qr"
      class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      type="button"
    >
      {t('button.generate')}
    </button>
    <div id="qr-result" class="w-64 h-64 flex items-center justify-center border border-gray-300 rounded-lg">
      <p class="text-gray-500 text-center p-4">{t('result.empty')}</p>
    </div>
  </div>
</div>

<script>
  import QRCode from 'qrcode';

  const textArea = document.getElementById('qr-text') as HTMLTextAreaElement;
  const generateButton = document.getElementById('generate-qr');
  const resultDiv = document.getElementById('qr-result');

  if (textArea && generateButton && resultDiv) {
    generateButton.addEventListener('click', async () => {
      const text = textArea.value.trim();
      if (!text) return;

      try {
        const url = await QRCode.toDataURL(text, {
          width: 256,
          margin: 1,
          color: {
            dark: '#000000',
            light: '#ffffff'
          }
        });

        const img = document.createElement('img');
        img.src = url;
        img.alt = 'Generated QR Code';
        img.className = 'w-64 h-64';
        
        resultDiv.innerHTML = '';
        resultDiv.appendChild(img);
      } catch (err) {
        console.error(err);
      }
    });
  }
</script>
